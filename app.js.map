{"version":3,"sources":["app/components/App.js","app/components/Timer.js","app/initialize.js","app/reducer.js"],"names":["App","e","preventDefault","props","dispatch","state","settings","interval","setInterval","type","toggle","bind","Component","Count","sound","src","name","prevProps","Math","ceil","timer","counts","play","op","val","min","max","value","label","unit","isStopped","progress","active","count","height","update","Timer","startSound","endSound","ConnectedApp","document","addEventListener","store","hang","rest","reps","recover","render","querySelector","start","stop","updateSetting","inc","dec","prevTime","Date","getTime","dt","clearInterval"],"mappings":"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","file":"public/app.js","sourcesContent":["import React from 'react'\nimport cn from 'classnames'\n\nimport Timer from './Timer'\n\nexport default class App extends React.Component {\n  toggle (e) {\n    e.preventDefault()\n    const { dispatch, state, settings } = this.props\n    if (state === 'stopped') {\n      const interval = setInterval(() => {\n        dispatch({ type: 'update' })\n      }, 100)\n      dispatch({ type: 'start', interval, settings })\n    } else {\n      dispatch({ type: 'stop' })\n    }\n  }\n  stop (e) {\n    e.preventDefault()\n    this.props.dispatch({ type: 'stop' })\n  }\n  render () {\n    return <div className='app'>\n      <Timer {...this.props} />\n      <button className={cn('toggle', this.props.state)} onClick={this.toggle.bind(this)} />\n    </div>\n  }\n}\n","import React from 'react'\nimport cn from 'classnames'\nimport { Howl } from 'howler'\n\nclass Count extends React.Component {\n  constructor (props) {\n    super(props)\n    this.sound = new Howl({\n      src: [`./audio/${props.name}.mp3`]\n    })\n  }\n  componentDidUpdate (prevProps) {\n    if (Math.ceil(this.props.timer.counts[this.props.name]) !==\n        Math.ceil(prevProps.timer.counts[prevProps.name])) {\n      this.sound.play()\n    }\n  }\n  update (op, val, e) {\n    e.preventDefault()\n    const { dispatch, settings, name, min, max } = this.props\n    const value = settings[name]\n    if ((op === 'dec' && value <= min) ||\n        (op === 'inc' && value >= max)) {\n      return\n    }\n    dispatch({\n      type: 'updateSetting',\n      [op]: val,\n      name\n    })\n  }\n  render () {\n    const { state, settings, timer, name, label, unit } = this.props\n    const isStopped = state === 'stopped'\n    const counts = isStopped ? settings : timer.counts\n    const value = counts[name]\n    const progress = value / settings[name]\n    return <div className={cn('count', name, { active: name === timer.count })}>\n      <div className='count-bg' style={{ height: (progress * 100) + '%' }} />\n      <span className='label'>{label}</span>\n      {isStopped\n        ? <button className='up' onClick={this.update.bind(this, 'inc', 1)} />\n        : null}\n      <div className='value'>{Math.ceil(value)}</div>\n      {isStopped\n        ? <button className='down' onClick={this.update.bind(this, 'dec', 1)} />\n        : null}\n      <span className='label'>{unit}</span>\n    </div>\n  }\n}\n\nexport default class Timer extends React.Component {\n  constructor (props) {\n    super(props)\n    this.startSound = new Howl({\n      src: [`./audio/rep_start.mp3`]\n    })\n    this.endSound = new Howl({\n      src: [`./audio/rep_end.mp3`]\n    })\n  }\n  componentDidUpdate (prevProps) {\n    const { count } = this.props.timer\n    if (count !== prevProps.timer.count) {\n      switch (count) {\n        case 'hang':\n          this.startSound.play()\n          break\n        case 'rest':\n          this.endSound.play()\n          break\n      }\n    }\n  }\n  render () {\n    return <div className='timer'>\n      <Count name='hang' label='Hang' unit='secs' min={1} max={99} {...this.props} />\n      <Count name='rest' label='Rest' unit='secs' min={1} max={99} {...this.props} />\n      <Count name='reps' label='Reps' unit='total' min={1} max={99} {...this.props} />\n      <Count name='recover' label='Recover' unit='mins' min={1} max={99} {...this.props} />\n    </div>\n  }\n}\n","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport App from 'components/App'\nimport {createStore} from 'redux'\nimport {Provider, connect} from 'react-redux'\n\nimport reducer from './reducer'\n\nconst ConnectedApp = connect(state => state)(App)\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const store = createStore(reducer, {\n    settings: {\n      hang: 7,\n      rest: 3,\n      reps: 6,\n      recover: 3\n    }\n  })\n  ReactDOM.render(<Provider store={store}>\n    <ConnectedApp />\n  </Provider>, document.querySelector('#app'))\n})\n","import { combineReducers } from 'redux'\nimport buildReducer from 'build-reducer'\n\nexport default combineReducers({\n  state: buildReducer({\n    start (state) {\n      return 'started'\n    },\n    stop (state) {\n      return 'stopped'\n    }\n  }, 'stopped'),\n\n  settings: buildReducer({\n    updateSetting (state, { name, inc, dec }) {\n      return {\n        ...state,\n        [name]: state[name] + (inc || 0) - (dec || 0)\n      }\n    }\n  }, {}),\n\n  timer: buildReducer({\n    start (state, { interval, settings }) {\n      const prevTime = new Date().getTime()\n      return {\n        settings,\n        counts: settings,\n        interval,\n        prevTime\n      }\n    },\n    update (state) {\n      const prevTime = new Date().getTime()\n      const dt = prevTime - state.prevTime\n      let { count, settings, counts } = state\n      let { hang, rest, reps, recover } = counts\n      if (counts.hang > 0) {\n        count = 'hang'\n        hang = Math.max(0, counts.hang - (dt / 1000))\n      } else if (counts.rest > 0) {\n        count = 'rest'\n        rest = Math.max(0, counts.rest - (dt / 1000))\n      } else if (counts.reps > 0) {\n        count = 'reps'\n        reps = counts.reps - 1\n        hang = settings.hang\n        rest = settings.rest\n      } else if (counts.recover > 0) {\n        count = 'recover'\n        recover = Math.max(0, counts.recover - (dt / 60 / 1000))\n      } else {\n        count = 'hang'\n        hang = settings.hang\n        rest = settings.rest\n        reps = settings.reps\n      }\n      return {\n        ...state,\n        counts: { hang, rest, reps, recover },\n        count,\n        prevTime\n      }\n    },\n    stop (state) {\n      clearInterval(state.interval)\n      return {\n        ...state,\n        settings: null,\n        count: null\n      }\n    }\n  }, { counts: {} })\n})\n\n"]}